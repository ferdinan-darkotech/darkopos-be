import moment from 'moment'
import db from '../models'
import dbv from '../models/view'
import stringSQL from '../native/transfer/sqlTransfer'
import { getNativeQuery } from '../native/nativeUtils'
import { getStockMinusAlert } from './Report/fifoReportService'
import { getSequenceFormatByCode } from './sequenceService'
import { getDataByStoreAndCode, increaseSequence } from './sequencesService'
import { rearrangeTransferOutHpokokHppPrice } from './transfer/transferOut'
import stringSQLsequence from '../native/sqlSequence'
import {
  ApiError
} from '../services/v1/errorHandlingService'
import sequelize from '../native/sequelize'

const transferIn = db.tbl_transfer_in
const tbl_sequence = db.tbl_sequence
const transferInDetail = db.tbl_transfer_in_detail
const tbl_transfer_in_detail_hpokok = db.tbl_transfer_in_detail_hpokok
const transferOut = db.tbl_transfer_out
const transferOutDetail = db.tbl_transfer_out_detail
const tbl_transfer_out_detail_hpokok = db.tbl_transfer_out_detail_hpokok
const vwTransferIn = dbv.vw_transfer_in
const vwTransferOut = dbv.vw_transfer_out
const vwTransferOutDetail = dbv.vw_transfer_out_detail
const vwTransferInDetail = dbv.vw_transfer_in_detail

const vwTransferInFields = ['id', 'storeId', 'storeName', 'storeIdSender', 'storeNameSender', 'transNo', 'reference', 'referenceTrans', 'transType', 'employeeId', 'employeeName', 'carNumber',
  'status', 'active', 'transDate', 'totalPackage', 'description', 'createdBy', 'createdAt', 'updatedBy', 'updatedAt'
]

const vwTransferOutFields = ['id', 'storeId', 'storeName', 'storeIdReceiver', 'storeNameReceiver', 'transNo', 'reference', 'transType', 'employeeId', 'employeeName', 'carNumber',
  'status', 'active', 'transDate', 'totalPackage', 'description', 'memo', 'createdBy', 'createdAt', 'updatedBy', 'updatedAt'
]

const vwDetailFields = ['id', 'storeId', 'storeName', 'transNo', 'transType', 'transDate',
  'productId', 'productCode', 'productName', 'qty', 'description', 'createdBy', 'createdAt', 'updatedBy', 'updatedAt'
]

// getDataIn,
export function getTransByNoIn (query) {
  return vwTransferIn.findOne({
    attributes: vwTransferInFields,
    where: {
      ...query
    },
    raw: false
  })
}

export function getTransByNoInForCancel (transNo, storeId) {
  console.log('getTransByNoIn:', transNo)
  return vwTransferIn.findOne({
    attributes: vwTransferInFields,
    where: {
      active: 1,
      transNo: transNo,
      storeId: storeId,
    },
    raw: false
  })
}

export function transExistsIn (params) {
  console.log('>>>>', params)
  return getTransByNoIn(params).then(data => {
    console.log('data', data)
    if (data === null) {
      return false
    } else {
      return true
    }
  })
}

export function transExistsInForCancel (transNo, storeId) {
  return getTransByNoInForCancel(transNo, storeId).then(data => {
    if (data === null) {
      return false;
    } else {
      return true;
    }
  })
}

export function getInData (start, end, query) {
  if (start && end) {
    query["transDate"] = {
      [Op.between]: [start, end]
    }
  }
  return vwTransferIn.findAll({
    attributes: vwTransferInFields,
    where: {
      ...query,
    }
  })
}

// getDataOut,
export function getTransByNoOut (transNo, storeId) {
  console.log('getTransByNoOut:', transNo);
  return vwTransferOut.findOne({
    attributes: vwTransferOutFields,
    where: {
      active: 1,
      transNo: transNo,
      storeId: storeId,
    },
    raw: false
  })
}

export function getTransByNoOutReceiver (transNo, storeId) {
  console.log('getTransByNoOutReceiver:', transNo);
  return vwTransferOut.findOne({
    attributes: vwTransferOutFields,
    where: {
      active: 1,
      transNo: transNo,
      storeId: storeId,
    },
    raw: false
  })
}

export function getTransByNoOutForCancel (transNo, storeId) {
  console.log('getTransByNoOutForCancel:', storeId);
  return vwTransferOut.findOne({
    where: {
      status: 0,
      active: 1,
      transNo: transNo,
      storeId: storeId
    },
    raw: false
  })
}

export function getTransByNoOutForInsertIn (id) {
  console.log('getTransByNoOutForInsertIn:', id);
  return vwTransferOut.findOne({
    where: {
      active: 1,
      id: id
    },
    raw: false
  })
}

export function transExistsOut (transNo, storeId) {
  return getTransByNoOut(transNo, storeId).then(data => {
    if (data === null) {
      return false;
    } else {
      return true;
    }
  })
}

export function transExistsOutCancel (transNo, storeId) {
  return getTransByNoOutForCancel(transNo, storeId).then(data => {
    if (data === null) {
      return false;
    } else {
      return true;
    }
  })
}

export function transExistsOutStatus (id) {
  return getTransByNoOutForInsertIn(id).then(data => {
    if (data === null) {
      return false;
    } else {
      return true;
    }
  })
}

export function getOutData (start, end, query) {
  if (start && end) {
    query["transDate"] = {
      [Op.between]: [start, end]
    }
  }
  return vwTransferOut.findAll({
    attributes: vwTransferOutFields,
    where: {
      ...query,
    }
  })
}


export function createTransferIn (transNo, data, detail, transferOutNo, storeId, createdBy, next) {
  console.log('createTransferIn:', transNo);

  let sSQL = stringSQLsequence.s00001
  return sequelize.transaction(
    function (t) {
      return sequelize.query(sSQL, {
        replacements: {
          seqCode: 'MUIN',
          seqType: storeId
        },
        type: sequelize.QueryTypes.CALL
      }).then((sequence) => {
        return transferIn.create({
          storeId: storeId,
          storeIdSender: data.storeIdSender,
          transNo: sequence[0][0].seq,
          reference: !data.reference ? null : data.reference.toString(),
          transType: data.transType,
          employeeId: data.employeeId,
          carNumber: data.carNumber,
          status: 1,
          active: 1,
          totalPackage: data.totalPackage,
          description: data.description,
          createdAt: moment(),
          updatedAt: moment(),
          createdBy: createdBy,
          updatedBy: null
        }, { transaction: t }).then(result => {
          var arrayProd = []
          for (var n = 0; n < detail.length; n += 1) {
            arrayProd.push({
              storeId: storeId,
              transNo: sequence[0][0].seq,
              transType: detail[n].transType,
              productId: detail[n].productId,
              qty: detail[n].qty,
              description: detail[n].description,
              updatestock: true,
              createdAt: moment(),
              updatedAt: moment(),
              createdBy: createdBy,
              updatedBy: '---'
            })
          }
          return transferInDetail.bulkCreate(
            arrayProd, { transaction: t }
          ).then(resultDetail => {
            return transferOut.update({
              receiveDate: data.receiveDate,
              status: 1,
              updatedBy: createdBy
            }, {
                where: {
                  id: data.reference
                }
              }, { transaction: t }).then(resultUpdate => {
                return tbl_sequence.findOne({
                  attributes: ['seqValue'],
                  where: {
                    seqCode: 'MUIN',
                    storeId: storeId
                  }
                }).then(resultSeq => {
                  return tbl_sequence.update({
                    seqValue: resultSeq.seqValue + 1
                  }, { 
                    where: {
                      seqCode: 'MUIN',
                      storeId: storeId
                    }
                  }).catch(err => {
                    t.rollback()
                    next(new ApiError(422, err + `Couldn't update sequence.`, err))
                  })
                })
              }).catch(err => {
                const errObj = JSON.parse(JSON.stringify(err))
                const {
                  parent,
                  original,
                  sql,
                  ...other
                } = errObj
                t.rollback()
                next(new ApiError(501, other, err))
              })
          }).catch(err => {
            const errObj = JSON.parse(JSON.stringify(err))
            const {
              parent,
              original,
              sql,
              ...other
            } = errObj
            t.rollback()
            next(new ApiError(422, err + `Couldn't create ${transNo}.`, err))
          })
        })
      }).catch(err => {
        t.rollback()
        const errObj = JSON.parse(JSON.stringify(err))
        const {
          parent,
          original,
          sql,
          ...other
        } = errObj
        next(new ApiError(501, `Couldn't find sequence.`, err))
      })
    }).catch(err => {
      const errObj = JSON.parse(JSON.stringify(err))
      const {
        parent,
        original,
        sql,
        ...other
      } = errObj
      next(new ApiError(422, err + `Couldn't create ${transNo}.`, err))
    })
}

// export function createTransferInDetail (transNo, data, storeId, createdBy, next) {
//     var arrayProd = []
//     for (var n = 0; n < data.length; n += 1) {
//         arrayProd.push({
//             storeId: storeId,
//             transNo: transNo,
//             transType: data[n].transType,
//             productId: data[n].productId,
//             qty: data[n].qty,
//             description: data[n].description,
//             createdBy: createdBy,
//             updatedBy: '---'
//         })
//     }
//     return transferInDetail.bulkCreate(
//         arrayProd
//     ).catch(err => {
//         const errObj = JSON.parse(JSON.stringify(err))
//         const {
//             parent,
//             original,
//             sql,
//             ...other
//         } = errObj
//         next(new ApiError(400, other, err))
//     })
// }

export function updateTransferInCancel (data, updatedBy, next, transaction) {
  return transferIn.update({
    active: 0,
    status: 0,
    memo: data.memo,
    updatedBy: updatedBy
  }, {
      where: {
        id: data.id
      },
      transaction
    }).catch(err => {
      const errObj = JSON.parse(JSON.stringify(err))
      const {
        parent,
        original,
        sql,
        ...other
      } = errObj
      next(new ApiError(501, other, err))
    })
}

export async function cancelTransferIn (data, updatedBy, next, res) {
  let transaction
  try {
    transaction = await sequelize.transaction()

    /*
    * Start Check Stock
    */

    const getCancelStock = await getInDetail({ transNo: data.transNo, storeId: data.storeId })
    let restrictedStock
    if ((getCancelStock || []).length > 0) {
      data.transDate = moment(getCancelStock[0].transDate).endOf('month').format('YYYY-MM-DD')
      restrictedStock = await getStockMinusAlert(data, getCancelStock, next) // jika true ada stok yg minus
      if (restrictedStock.status) {
        const jsonObj = {
          success: false,
          message: `${moment(data.transDate).format('YYYY-MM')}: Couldn't cancel transfer, stock is already used.`,
          detail: 'Use adjustment instead',
          data: restrictedStock.data
        }
        res.xstatus(422).json(jsonObj)
        await transaction.rollback()
        return false
      }

      data.transDate = moment().format('YYYY-MM-DD')
      restrictedStock = await getStockMinusAlert(data, getCancelStock, next) // jika true ada stok yg minus

      if (restrictedStock.status) {
        const jsonObj = {
          success: false,
          message: `${moment().format('YYYY-MM')}: Couldn't cancel transfer, stock is already used.`,
          detail: 'Use adjustment instead',
          data: restrictedStock.data
        }
        res.xstatus(422).json(jsonObj)
        await transaction.rollback()
        return false
      }
    }

    /*
    * End Check Stock
    */

    await updateTransferInCancel(data, updatedBy, next, transaction)
    await updateStatusTransferOutCancel(data.reference, 0, updatedBy, next, transaction)
    await transaction.commit()
    return true

  } catch (error) {
    await transaction.rollback()
    next(new ApiError(422, error + `Couldn't cancel mutasi.`, error))
  }
}

function insertTransferOutHeader (sequence, storeId, data, createdBy, transaction) {
  // INSERT HEADER
  return transferOut.create({
    storeId: storeId,
    storeIdReceiver: data.storeIdReceiver,
    transNo: sequence,
    reference: data.reference,
    transType: data.transType,
    employeeId: data.employeeId,
    carNumber: data.carNumber,
    status: 0,
    active: 1,
    totalPackage: data.totalPackage,
    description: data.description,
    createdBy: createdBy,
    createdAt: moment(),
    updatedBy: null,
    updatedAt: moment()
  }, { transaction })
}

function insertTransferOutDetail (sequence, storeId, detail, createdBy, transaction) {
  // INSERT DETAIL
  let arrayProd = []
  let productId = ''
  let n = 0
  if (detail.length > 0) {
    do {
      arrayProd.push({
        storeId: storeId,
        transNo: sequence,
        transType: detail[n].transType,
        productId: detail[n].productId,
        qty: detail[n].qty,
        description: detail[n].description,
        createdBy: createdBy,
        createdAt: moment(),
        updatedBy: '---',
        updatestock: true,
        updatedAt: moment()
      })
      productId += detail[n].productId + ','
      n += 1
    } while (n < detail.length)
  }
  transferOutDetail.bulkCreate(
    arrayProd,
    { transaction }
  )
  return ({
    productId,
    arrayProd
  })
}

export function getTransferOutHpokok (storeId, productId) {
  let sSQL = stringSQL.s00002
  return sequelize.query(sSQL, {
    replacements: {
      varStoreId: storeId,
      varProductId: productId
    },
  })
}

export async function getExistsTransferOutHpokok (period, year, storeId, productId) {
  let sSQL = stringSQL.s00004
    .replace("_BIND01", period)
    .replace("_BIND02", year)
    .replace("_BIND03", storeId)
    .replace("_BIND04", `'${productId}'`)
  const data = await getNativeQuery(sSQL, false, 'RAW')
  return data
}

export function simpleInsertTransferOutHpokok (rows, createdBy, transaction) {
  let arrayHppPrice = []
  for (let key in rows) {
    const data = rows[key]
    arrayHppPrice.push({
      storeId: data.storeId,
      storeIdReceiver: data.storeIdReceiver,
      purchaseId: data.transNoId,
      transNo: data.transNo,
      transType: data.transType,
      productId: data.productId,
      qty: data.qty,
      purchasePrice: data.purchasePrice,
      createdBy,
      updatedBy: '---'
    })
  }
  return tbl_transfer_out_detail_hpokok.bulkCreate(
    arrayHppPrice,
    { transaction }
  )
}

async function insertTransferOutHpokok (data, sequence, storeId, arrayProd, resultDetail, createdBy, transaction) {
  const arrayHppPrice = await rearrangeTransferOutHpokokHppPrice(data, sequence, storeId, arrayProd, resultDetail, createdBy)
  if (arrayHppPrice.success) {
    const insertedData = arrayHppPrice.data
    return tbl_transfer_out_detail_hpokok.bulkCreate(
      insertedData,
      { transaction }
    )
  }
  return arrayHppPrice.success
}

export async function createTransferOut (data, storeId, detail, createdBy, next, res) {
  let transaction

  try {
    transaction = await sequelize.transaction()
    const sequence = await getSequenceFormatByCode({ seqCode: 'MUOUT', type: storeId })
    const lastSequence = await getDataByStoreAndCode('MUOUT', storeId)

    await insertTransferOutHeader(sequence, storeId, data, createdBy, transaction)
    await insertTransferOutDetail(sequence, storeId, detail, createdBy, transaction)

    // const resultTransferOutDetail = 

    // const resultDetail = await getTransferOutHpokok(storeId, resultTransferOutDetail.productId)
    // const resultInsertTransferOutHpokok = await insertTransferOutHpokok(data, sequence, storeId, resultTransferOutDetail.arrayProd, resultDetail[0], createdBy, transaction)

    // if (!resultInsertTransferOutHpokok) {
    //   transaction.rollback()
    //   let jsonObj = {
    //     success: false,
    //     detail: 'Qty is not available',
    //     message: 'Qty is not available',
    //   }
    //   res.xstatus(422).json(jsonObj)
    //   return false
    // }
    await increaseSequence('MUOUT', storeId, lastSequence.seqValue, transaction)

    await transaction.commit()
    return true
  } catch (error) {
    await transaction.rollback()
    next(new ApiError(422, error + `Couldn't cancel mutasi.`, error))
  }
}

export function updateStatusTransferOut (id, status, data, updatedBy, next) {
  console.log('updateStatusTransferOut', data)
  return transferOut.update({
    receiveDate: data.receiveDate,
    status: status,
    updatedBy: updatedBy
  }, {
      where: {
        id: id
      }
    }).catch(err => {
      const errObj = JSON.parse(JSON.stringify(err))
      const {
        parent,
        original,
        sql,
        ...other
      } = errObj
      next(new ApiError(501, other, err))
    })
}

export function updateStatusTransferOutCancel (id, status, updatedBy, next, transaction) {
  return transferOut.update({
    status: status,
    updatedBy: updatedBy
  }, {
      where: {
        id: id
      },
      transaction
    }).catch(err => {
      const errObj = JSON.parse(JSON.stringify(err))
      const {
        parent,
        original,
        sql,
        ...other
      } = errObj
      next(new ApiError(501, other, err))
    })
}

export function cancelTransferOut (data, updatedBy, next) {
  return transferOut.update({
    active: 0,
    memo: data.memo,
    updatedBy: updatedBy
  }, {
      where: {
        id: data.id
      }
    }).catch(err => {
      const errObj = JSON.parse(JSON.stringify(err))
      const {
        parent,
        original,
        sql,
        ...other
      } = errObj
      next(new ApiError(501, other, err))
    })
}


/*======================DETAIL======================*/

export function getOutDetail (query) {
  return vwTransferOutDetail.findAll({
    attributes: vwDetailFields,
    where: {
      ...query,
    }
  })
}

export function getInDetail (query) {
  return vwTransferInDetail.findAll({
    attributes: vwDetailFields,
    where: {
      ...query,
    },
    raw: false
  })
}
